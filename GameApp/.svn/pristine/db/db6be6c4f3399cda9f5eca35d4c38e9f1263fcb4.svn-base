{"version":3,"sources":["..\\..\\..\\..\\assets\\script/assets\\script\\ajax.js"],"names":["CusHttp","_http","_callback","flag","actual","newArray","i","length","push","jsonObj","jsonString","cleanArray","Object","keys","map","key","undefined","encodeURIComponent","join","Url","cb","cc","info","http","loader","getXMLHttpRequest","open","setRequestHeader","onreadystatechange","_result","bind","timeout","send","params","data","JSON","stringify","contentType","toQueryString","readyState","status","parse","responseText","log"],"mappings":"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","file":"ajax.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["import { encryption, DecryptData } from \"./funcComm\";\r\n\r\n/**\r\n * 新版接口\r\n * @example 使用 var Http = require('Http')\r\n * @example      new Http().Get(url, cb)//url链接 回调函数\r\n * @example      new Http().Post(url, param, cb)//url链接 param参数(json对象) 回调函数\r\n */\r\nclass CusHttp {\r\n  constructor() {\r\n    this._http;\r\n    this._callback;\r\n    this.flag;\r\n\r\n    // this._event = CusEvent.getInstance();\r\n  }\r\n  /**\r\n   *\r\n   * @param actual\r\n   */\r\n  cleanArray(actual) {\r\n    const newArray = [];\r\n    for (let i = 0; i < actual.length; i++) {\r\n      if (actual[i]) {\r\n        newArray.push(actual[i]);\r\n      }\r\n    }\r\n    return newArray;\r\n  }\r\n\r\n  /**\r\n   * JSON对象转换为QueryString\r\n   * @param jsonObj\r\n   */\r\n  toQueryString(jsonObj) {\r\n    if (!jsonObj) return \"\";\r\n    var jsonString = this.cleanArray(\r\n      Object.keys(jsonObj).map(key => {\r\n        if (jsonObj[key] === undefined) return \"\";\r\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(jsonObj[key]);\r\n      })\r\n    ).join(\"&\");\r\n\r\n    return jsonString;\r\n  }\r\n\r\n  /**\r\n   * Get 请求\r\n   * @param {*} Url\r\n   * @param {*} cb\r\n   */\r\n  Get(Url, cb) {\r\n    cc.info(Url);\r\n    let http = cc.loader.getXMLHttpRequest();\r\n    http.open(\"GET\", Url, true);\r\n    http.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n    this._callback = cb;\r\n    http.onreadystatechange = this._result.bind(this);\r\n    http.timeout = 10000;\r\n    http.send();\r\n    this._http = http;\r\n  }\r\n  /**\r\n   * Post请求\r\n   * @param {*}flag,是否加密\r\n   */\r\n\r\n  Post(Url, params, cb, flag) {\r\n    this.flag = flag;\r\n    data = JSON.stringify(data); //以前不懂要怎么传，是缺少这一步\r\n    let http = cc.loader.getXMLHttpRequest(),\r\n      contentType = \"application/x-www-form-urlencoded\",\r\n      data = this.toQueryString(params);\r\n    http.open(\"POST\", Url, true);\r\n    if (!flag) {\r\n      contentType = \"application/json\";\r\n      data = JSON.stringify(encryption(params));\r\n    }\r\n    http.setRequestHeader(\"Content-Type\", contentType);\r\n    this._callback = cb;\r\n    http.onreadystatechange = this._result.bind(this);\r\n    http.timeout = 5000; //超时5秒\r\n    http.send(data);\r\n    this._http = http;\r\n  }\r\n  /**\r\n   * 获取结果给_callback\r\n   */\r\n  _result() {\r\n    if (this._http.readyState == 4) {\r\n      if (this._http.status >= 200 && this._http.status < 207) {\r\n        let data = JSON.parse(this._http.responseText);\r\n        if (this._callback) {\r\n          this.flag\r\n            ? this._callback(data, this._http)\r\n            : this._callback(DecryptData(data), this._http);\r\n        }\r\n      } else {\r\n        cc.log(\"请求失败\");\r\n      }\r\n    }\r\n  }\r\n}\r\nexport default CusHttp;\r\n"]}