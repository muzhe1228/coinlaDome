{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\script\\crypto-js/assets\\script\\crypto-js\\sha3.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","Math","C","C_lib","lib","WordArray","Hasher","C_x64","x64","X64Word","Word","C_algo","algo","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","x","y","t","newX","newY","LFSR","i","roundConstantMsw","roundConstantLsw","j","bitPosition","create","T","SHA3","extend","cfg","outputLength","_doReset","state","_state","init","blockSize","_doProcessBlock","M","offset","nBlockSizeLanes","M2i","M2i1","lane","high","low","round","tMsw","tLsw","Tx","Tx4","Tx1","Tx1Msw","Tx1Lsw","laneIndex","laneMsw","laneLsw","rhoOffset","TPiLane","T0","state0","TLane","Tx1Lane","Tx2Lane","roundConstant","_doFinalize","data","_data","dataWords","words","nBitsTotal","_nDataBytes","nBitsLeft","sigBytes","blockSizeBits","ceil","length","_process","outputLengthBytes","outputLengthLanes","hashWords","push","clone","call","slice","_createHelper","HmacSHA3","_createHmacHelper"],"mappings":"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","file":"sha3.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));"]}