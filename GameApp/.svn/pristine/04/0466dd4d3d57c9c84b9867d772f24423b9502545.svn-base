{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\script\\crypto-js/assets\\script\\crypto-js\\mode-ctr.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","mode","CTR","lib","BlockCipherMode","extend","Encryptor","processBlock","words","offset","cipher","_cipher","blockSize","iv","_iv","counter","_counter","slice","undefined","keystream","encryptBlock","i","Decryptor"],"mappings":";;;;;;;;AAAA,CAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;AACjC,KAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAChC;AACAC,SAAOD,OAAP,GAAiBA,UAAUF,QAAQI,QAAQ,QAAR,CAAR,EAA2BA,QAAQ,eAAR,CAA3B,CAA3B;AACA,EAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AACpD;AACAD,SAAO,CAAC,QAAD,EAAW,eAAX,CAAP,EAAoCL,OAApC;AACA,EAHI,MAIA;AACJ;AACAA,UAAQD,KAAKQ,QAAb;AACA;AACD,CAbC,aAaM,UAAUA,QAAV,EAAoB;;AAE3B;;;AAGAA,UAASC,IAAT,CAAcC,GAAd,GAAqB,YAAY;AAC7B,MAAIA,MAAMF,SAASG,GAAT,CAAaC,eAAb,CAA6BC,MAA7B,EAAV;;AAEA,MAAIC,YAAYJ,IAAII,SAAJ,GAAgBJ,IAAIG,MAAJ,CAAW;AACvCE,iBAAc,sBAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACnC;AACA,QAAIC,SAAS,KAAKC,OAAlB;AACA,QAAIC,YAAYF,OAAOE,SAAvB;AACA,QAAIC,KAAK,KAAKC,GAAd;AACA,QAAIC,UAAU,KAAKC,QAAnB;;AAEA;AACA,QAAIH,EAAJ,EAAQ;AACJE,eAAU,KAAKC,QAAL,GAAgBH,GAAGI,KAAH,CAAS,CAAT,CAA1B;;AAEA;AACA,UAAKH,GAAL,GAAWI,SAAX;AACH;AACD,QAAIC,YAAYJ,QAAQE,KAAR,CAAc,CAAd,CAAhB;AACAP,WAAOU,YAAP,CAAoBD,SAApB,EAA+B,CAA/B;;AAEA;AACAJ,YAAQH,YAAY,CAApB,IAA0BG,QAAQH,YAAY,CAApB,IAAyB,CAA1B,GAA+B,CAAxD;;AAEA;AACA,SAAK,IAAIS,IAAI,CAAb,EAAgBA,IAAIT,SAApB,EAA+BS,GAA/B,EAAoC;AAChCb,WAAMC,SAASY,CAAf,KAAqBF,UAAUE,CAAV,CAArB;AACH;AACJ;AAzBsC,GAAX,CAAhC;;AA4BAnB,MAAIoB,SAAJ,GAAgBhB,SAAhB;;AAEA,SAAOJ,GAAP;AACH,EAlCoB,EAArB;;AAqCA,QAAOF,SAASC,IAAT,CAAcC,GAArB;AAEA,CAzDC,CAAD","file":"mode-ctr.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));"]}