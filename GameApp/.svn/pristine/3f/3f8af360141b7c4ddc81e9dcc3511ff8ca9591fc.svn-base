{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\script\\crypto-js/assets\\script\\crypto-js\\evpkdf.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","Base","WordArray","C_algo","algo","MD5","EvpKDF","extend","cfg","keySize","hasher","iterations","init","compute","password","salt","create","derivedKey","derivedKeyWords","words","length","block","update","finalize","reset","i","concat","sigBytes"],"mappings":";;;;;;;;AAAA,CAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;AACjC,KAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAChC;AACAC,SAAOD,OAAP,GAAiBA,UAAUF,QAAQI,QAAQ,QAAR,CAAR,EAA2BA,QAAQ,QAAR,CAA3B,EAA8CA,QAAQ,QAAR,CAA9C,CAA3B;AACA,EAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AACpD;AACAD,SAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,CAAP,EAAuCL,OAAvC;AACA,EAHI,MAIA;AACJ;AACAA,UAAQD,KAAKQ,QAAb;AACA;AACD,CAbC,aAaM,UAAUA,QAAV,EAAoB;;AAE1B,cAAY;AACT;AACA,MAAIC,IAAID,QAAR;AACA,MAAIE,QAAQD,EAAEE,GAAd;AACA,MAAIC,OAAOF,MAAME,IAAjB;AACA,MAAIC,YAAYH,MAAMG,SAAtB;AACA,MAAIC,SAASL,EAAEM,IAAf;AACA,MAAIC,MAAMF,OAAOE,GAAjB;;AAEA;;;;AAIA,MAAIC,SAASH,OAAOG,MAAP,GAAgBL,KAAKM,MAAL,CAAY;AACrC;;;;;;;AAOAC,QAAKP,KAAKM,MAAL,CAAY;AACbE,aAAS,MAAI,EADA;AAEbC,YAAQL,GAFK;AAGbM,gBAAY;AAHC,IAAZ,CARgC;;AAcrC;;;;;;;;;;;AAWAC,SAAM,cAAUJ,GAAV,EAAe;AACjB,SAAKA,GAAL,GAAW,KAAKA,GAAL,CAASD,MAAT,CAAgBC,GAAhB,CAAX;AACH,IA3BoC;;AA6BrC;;;;;;;;;;;;AAYAK,YAAS,iBAAUC,QAAV,EAAoBC,IAApB,EAA0B;AAC/B;AACA,QAAIP,MAAM,KAAKA,GAAf;;AAEA;AACA,QAAIE,SAASF,IAAIE,MAAJ,CAAWM,MAAX,EAAb;;AAEA;AACA,QAAIC,aAAaf,UAAUc,MAAV,EAAjB;;AAEA;AACA,QAAIE,kBAAkBD,WAAWE,KAAjC;AACA,QAAIV,UAAUD,IAAIC,OAAlB;AACA,QAAIE,aAAaH,IAAIG,UAArB;;AAEA;AACA,WAAOO,gBAAgBE,MAAhB,GAAyBX,OAAhC,EAAyC;AACrC,SAAIY,KAAJ,EAAW;AACPX,aAAOY,MAAP,CAAcD,KAAd;AACH;AACD,SAAIA,QAAQX,OAAOY,MAAP,CAAcR,QAAd,EAAwBS,QAAxB,CAAiCR,IAAjC,CAAZ;AACAL,YAAOc,KAAP;;AAEA;AACA,UAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAId,UAApB,EAAgCc,GAAhC,EAAqC;AACjCJ,cAAQX,OAAOa,QAAP,CAAgBF,KAAhB,CAAR;AACAX,aAAOc,KAAP;AACH;;AAEDP,gBAAWS,MAAX,CAAkBL,KAAlB;AACH;AACDJ,eAAWU,QAAX,GAAsBlB,UAAU,CAAhC;;AAEA,WAAOQ,UAAP;AACH;AA3EoC,GAAZ,CAA7B;;AA8EA;;;;;;;;;;;;;;;;;AAiBAnB,IAAEQ,MAAF,GAAW,UAAUQ,QAAV,EAAoBC,IAApB,EAA0BP,GAA1B,EAA+B;AACtC,UAAOF,OAAOU,MAAP,CAAcR,GAAd,EAAmBK,OAAnB,CAA2BC,QAA3B,EAAqCC,IAArC,CAAP;AACH,GAFD;AAGH,EA/GA,GAAD;;AAkHA,QAAOlB,SAASS,MAAhB;AAEA,CAnIC,CAAD","file":"evpkdf.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                var block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));"]}