{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\script\\crypto-js/assets\\script\\crypto-js\\cipher-core.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","lib","Cipher","undefined","C","C_lib","Base","WordArray","BufferedBlockAlgorithm","C_enc","enc","Utf8","Base64","C_algo","algo","EvpKDF","extend","cfg","createEncryptor","key","create","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","init","xformMode","_xformMode","_key","reset","call","_doReset","process","dataUpdate","_append","_process","finalize","finalProcessedData","_doFinalize","keySize","ivSize","_createHelper","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","cipher","encrypt","message","decrypt","ciphertext","StreamCipher","finalProcessedBlocks","blockSize","C_mode","mode","BlockCipherMode","iv","Encryptor","Decryptor","_cipher","_iv","CBC","processBlock","words","offset","xorBlock","encryptBlock","_prevBlock","slice","thisBlock","decryptBlock","block","i","C_pad","pad","Pkcs7","data","blockSizeBytes","nPaddingBytes","sigBytes","paddingWord","paddingWords","push","padding","concat","unpad","BlockCipher","modeCreator","_minBufferSize","_mode","__creator","_doProcessBlock","_data","CipherParams","cipherParams","mixIn","toString","formatter","stringify","C_format","format","OpenSSLFormatter","OpenSSL","salt","wordArray","parse","openSSLStr","ciphertextWords","splice","encryptor","cipherCfg","algorithm","_parse","plaintext","C_kdf","kdf","OpenSSLKdf","execute","password","random","compute","derivedParams"],"mappings":"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","file":"cipher-core.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                var block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                var block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                var modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                var modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                var wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));"]}