{"version":3,"sources":["mode-ctr-gladman.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","mode","CTRGladman","lib","BlockCipherMode","extend","incWord","word","b1","b2","b3","incCounter","counter","Encryptor","processBlock","words","offset","cipher","_cipher","blockSize","iv","_iv","_counter","slice","undefined","keystream","encryptBlock","i","Decryptor"],"mappings":";;;;;;;;AAAA,CAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;AACjC,KAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAChC;AACAC,SAAOD,OAAP,GAAiBA,UAAUF,QAAQI,QAAQ,QAAR,CAAR,EAA2BA,QAAQ,eAAR,CAA3B,CAA3B;AACA,EAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AACpD;AACAD,SAAO,CAAC,QAAD,EAAW,eAAX,CAAP,EAAoCL,OAApC;AACA,EAHI,MAIA;AACJ;AACAA,UAAQD,KAAKQ,QAAb;AACA;AACD,CAbC,aAaM,UAAUA,QAAV,EAAoB;;AAE3B;;;;;AAKAA,UAASC,IAAT,CAAcC,UAAd,GAA4B,YAAY;AACpC,MAAIA,aAAaF,SAASG,GAAT,CAAaC,eAAb,CAA6BC,MAA7B,EAAjB;;AAEH,WAASC,OAAT,CAAiBC,IAAjB,EACA;AACC,OAAI,CAAEA,QAAQ,EAAT,GAAe,IAAhB,MAA0B,IAA9B,EAAoC;AAAE;AACtC,QAAIC,KAAMD,QAAQ,EAAT,GAAa,IAAtB;AACA,QAAIE,KAAMF,QAAQ,CAAT,GAAY,IAArB;AACA,QAAIG,KAAKH,OAAO,IAAhB;;AAEA,QAAIC,OAAO,IAAX,EAAiB;AACjB;AACAA,WAAK,CAAL;AACA,UAAIC,OAAO,IAAX,EACA;AACCA,YAAK,CAAL;AACA,WAAIC,OAAO,IAAX,EACA;AACCA,aAAK,CAAL;AACA,QAHD,MAKA;AACC,UAAEA,EAAF;AACA;AACD,OAXD,MAaA;AACC,SAAED,EAAF;AACA;AACA,MAnBD,MAqBA;AACA,OAAED,EAAF;AACC;;AAEDD,WAAO,CAAP;AACAA,YAASC,MAAM,EAAf;AACAD,YAASE,MAAM,CAAf;AACAF,YAAQG,EAAR;AACC,IAlCD,MAoCA;AACAH,YAAS,QAAQ,EAAjB;AACC;AACD,UAAOA,IAAP;AACA;;AAED,WAASI,UAAT,CAAoBC,OAApB,EACA;AACC,OAAI,CAACA,QAAQ,CAAR,IAAaN,QAAQM,QAAQ,CAAR,CAAR,CAAd,MAAuC,CAA3C,EACA;AACC;AACAA,YAAQ,CAAR,IAAaN,QAAQM,QAAQ,CAAR,CAAR,CAAb;AACA;AACD,UAAOA,OAAP;AACA;;AAEE,MAAIC,YAAYX,WAAWW,SAAX,GAAuBX,WAAWG,MAAX,CAAkB;AACrDS,iBAAc,sBAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACnC;AACA,QAAIC,SAAS,KAAKC,OAAlB;AACA,QAAIC,YAAYF,OAAOE,SAAvB;AACA,QAAIC,KAAK,KAAKC,GAAd;AACA,QAAIT,UAAU,KAAKU,QAAnB;;AAEA;AACA,QAAIF,EAAJ,EAAQ;AACJR,eAAU,KAAKU,QAAL,GAAgBF,GAAGG,KAAH,CAAS,CAAT,CAA1B;;AAEA;AACA,UAAKF,GAAL,GAAWG,SAAX;AACH;;AAEVb,eAAWC,OAAX;;AAEA,QAAIa,YAAYb,QAAQW,KAAR,CAAc,CAAd,CAAhB;AACSN,WAAOS,YAAP,CAAoBD,SAApB,EAA+B,CAA/B;;AAEA;AACA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIR,SAApB,EAA+BQ,GAA/B,EAAoC;AAChCZ,WAAMC,SAASW,CAAf,KAAqBF,UAAUE,CAAV,CAArB;AACH;AACJ;AAzBoD,GAAlB,CAAvC;;AA4BAzB,aAAW0B,SAAX,GAAuBf,SAAvB;;AAEA,SAAOX,UAAP;AACH,EAxF2B,EAA5B;;AA6FA,QAAOF,SAASC,IAAT,CAAcC,UAArB;AAEA,CAnHC,CAAD","file":"mode-ctr-gladman.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));"]}