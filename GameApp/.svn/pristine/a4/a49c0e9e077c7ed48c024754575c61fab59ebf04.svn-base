{"version":3,"sources":["pad-iso10126.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","pad","Iso10126","data","blockSize","blockSizeBytes","nPaddingBytes","sigBytes","concat","lib","WordArray","random","create","unpad","words"],"mappings":";;;;;;;;AAAA,CAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;AACjC,KAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAChC;AACAC,SAAOD,OAAP,GAAiBA,UAAUF,QAAQI,QAAQ,QAAR,CAAR,EAA2BA,QAAQ,eAAR,CAA3B,CAA3B;AACA,EAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AACpD;AACAD,SAAO,CAAC,QAAD,EAAW,eAAX,CAAP,EAAoCL,OAApC;AACA,EAHI,MAIA;AACJ;AACAA,UAAQD,KAAKQ,QAAb;AACA;AACD,CAbC,aAaM,UAAUA,QAAV,EAAoB;;AAE3B;;;AAGAA,UAASC,GAAT,CAAaC,QAAb,GAAwB;AACpBD,OAAK,aAAUE,IAAV,EAAgBC,SAAhB,EAA2B;AAC5B;AACA,OAAIC,iBAAiBD,YAAY,CAAjC;;AAEA;AACA,OAAIE,gBAAgBD,iBAAiBF,KAAKI,QAAL,GAAgBF,cAArD;;AAEA;AACAF,QAAKK,MAAL,CAAYR,SAASS,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BL,gBAAgB,CAA9C,CAAZ,EACKE,MADL,CACYR,SAASS,GAAT,CAAaC,SAAb,CAAuBE,MAAvB,CAA8B,CAACN,iBAAiB,EAAlB,CAA9B,EAAqD,CAArD,CADZ;AAEH,GAXmB;;AAapBO,SAAO,eAAUV,IAAV,EAAgB;AACnB;AACA,OAAIG,gBAAgBH,KAAKW,KAAL,CAAYX,KAAKI,QAAL,GAAgB,CAAjB,KAAwB,CAAnC,IAAwC,IAA5D;;AAEA;AACAJ,QAAKI,QAAL,IAAiBD,aAAjB;AACH;AAnBmB,EAAxB;;AAuBA,QAAON,SAASC,GAAT,CAAaC,QAApB;AAEA,CA3CC,CAAD","file":"pad-iso10126.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO 10126 padding strategy.\n\t */\n\tCryptoJS.pad.Iso10126 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t        // Pad\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso10126;\n\n}));"]}