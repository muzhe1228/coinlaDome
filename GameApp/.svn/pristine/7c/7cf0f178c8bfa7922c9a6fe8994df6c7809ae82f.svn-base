{"version":3,"sources":["mode-cfb.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","mode","CFB","lib","BlockCipherMode","extend","Encryptor","processBlock","words","offset","cipher","_cipher","blockSize","generateKeystreamAndEncrypt","call","_prevBlock","slice","Decryptor","thisBlock","iv","_iv","keystream","undefined","encryptBlock","i"],"mappings":";;;;;;;;AAAA,CAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;AACjC,KAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAChC;AACAC,SAAOD,OAAP,GAAiBA,UAAUF,QAAQI,QAAQ,QAAR,CAAR,EAA2BA,QAAQ,eAAR,CAA3B,CAA3B;AACA,EAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AACpD;AACAD,SAAO,CAAC,QAAD,EAAW,eAAX,CAAP,EAAoCL,OAApC;AACA,EAHI,MAIA;AACJ;AACAA,UAAQD,KAAKQ,QAAb;AACA;AACD,CAbC,aAaM,UAAUA,QAAV,EAAoB;;AAE3B;;;AAGAA,UAASC,IAAT,CAAcC,GAAd,GAAqB,YAAY;AAC7B,MAAIA,MAAMF,SAASG,GAAT,CAAaC,eAAb,CAA6BC,MAA7B,EAAV;;AAEAH,MAAII,SAAJ,GAAgBJ,IAAIG,MAAJ,CAAW;AACvBE,iBAAc,sBAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACnC;AACA,QAAIC,SAAS,KAAKC,OAAlB;AACA,QAAIC,YAAYF,OAAOE,SAAvB;;AAEAC,gCAA4BC,IAA5B,CAAiC,IAAjC,EAAuCN,KAAvC,EAA8CC,MAA9C,EAAsDG,SAAtD,EAAiEF,MAAjE;;AAEA;AACA,SAAKK,UAAL,GAAkBP,MAAMQ,KAAN,CAAYP,MAAZ,EAAoBA,SAASG,SAA7B,CAAlB;AACH;AAVsB,GAAX,CAAhB;;AAaAV,MAAIe,SAAJ,GAAgBf,IAAIG,MAAJ,CAAW;AACvBE,iBAAc,sBAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACnC;AACA,QAAIC,SAAS,KAAKC,OAAlB;AACA,QAAIC,YAAYF,OAAOE,SAAvB;;AAEA;AACA,QAAIM,YAAYV,MAAMQ,KAAN,CAAYP,MAAZ,EAAoBA,SAASG,SAA7B,CAAhB;;AAEAC,gCAA4BC,IAA5B,CAAiC,IAAjC,EAAuCN,KAAvC,EAA8CC,MAA9C,EAAsDG,SAAtD,EAAiEF,MAAjE;;AAEA;AACA,SAAKK,UAAL,GAAkBG,SAAlB;AACH;AAbsB,GAAX,CAAhB;;AAgBA,WAASL,2BAAT,CAAqCL,KAArC,EAA4CC,MAA5C,EAAoDG,SAApD,EAA+DF,MAA/D,EAAuE;AACnE;AACA,OAAIS,KAAK,KAAKC,GAAd;;AAEA;AACA,OAAID,EAAJ,EAAQ;AACJ,QAAIE,YAAYF,GAAGH,KAAH,CAAS,CAAT,CAAhB;;AAEA;AACA,SAAKI,GAAL,GAAWE,SAAX;AACH,IALD,MAKO;AACH,QAAID,YAAY,KAAKN,UAArB;AACH;AACDL,UAAOa,YAAP,CAAoBF,SAApB,EAA+B,CAA/B;;AAEA;AACA,QAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIZ,SAApB,EAA+BY,GAA/B,EAAoC;AAChChB,UAAMC,SAASe,CAAf,KAAqBH,UAAUG,CAAV,CAArB;AACH;AACJ;;AAED,SAAOtB,GAAP;AACH,EAtDoB,EAArB;;AAyDA,QAAOF,SAASC,IAAT,CAAcC,GAArB;AAEA,CA7EC,CAAD","file":"mode-cfb.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            var keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            var keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));"]}