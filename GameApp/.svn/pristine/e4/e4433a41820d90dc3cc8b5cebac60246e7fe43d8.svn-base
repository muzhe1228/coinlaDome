{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\script\\crypto-js/assets\\script\\crypto-js\\aes.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","BlockCipher","C_algo","algo","SBOX","INV_SBOX","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","d","i","x","xi","sx","x2","x4","x8","t","RCON","AES","extend","_doReset","_nRounds","_keyPriorReset","_key","key","keyWords","words","keySize","sigBytes","nRounds","ksRows","keySchedule","_keySchedule","ksRow","invKeySchedule","_invKeySchedule","invKsRow","encryptBlock","M","offset","_doCryptBlock","decryptBlock","s0","s1","s2","s3","round","t0","t1","t2","t3","_createHelper"],"mappings":"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","file":"aes.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));"]}