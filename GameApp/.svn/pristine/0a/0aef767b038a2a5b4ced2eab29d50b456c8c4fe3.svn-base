{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\script\\crypto-js/assets\\script\\crypto-js\\hmac.js"],"names":["root","factory","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","Base","C_enc","enc","Utf8","C_algo","algo","HMAC","extend","init","hasher","key","_hasher","parse","hasherBlockSize","blockSize","hasherBlockSizeBytes","sigBytes","finalize","clamp","oKey","_oKey","clone","iKey","_iKey","oKeyWords","words","iKeyWords","i","reset","update","messageUpdate","innerHash","hmac","concat"],"mappings":";;;;;;;;AAAA,CAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AAC1B,KAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAChC;AACAC,SAAOD,OAAP,GAAiBA,UAAUD,QAAQG,QAAQ,QAAR,CAAR,CAA3B;AACA,EAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AACpD;AACAD,SAAO,CAAC,QAAD,CAAP,EAAmBJ,OAAnB;AACA,EAHI,MAIA;AACJ;AACAA,UAAQD,KAAKO,QAAb;AACA;AACD,CAbC,aAaM,UAAUA,QAAV,EAAoB;;AAE1B,cAAY;AACT;AACA,MAAIC,IAAID,QAAR;AACA,MAAIE,QAAQD,EAAEE,GAAd;AACA,MAAIC,OAAOF,MAAME,IAAjB;AACA,MAAIC,QAAQJ,EAAEK,GAAd;AACA,MAAIC,OAAOF,MAAME,IAAjB;AACA,MAAIC,SAASP,EAAEQ,IAAf;;AAEA;;;AAGA,MAAIC,OAAOF,OAAOE,IAAP,GAAcN,KAAKO,MAAL,CAAY;AACjC;;;;;;;;;;AAUAC,SAAM,cAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AACzB;AACAD,aAAS,KAAKE,OAAL,GAAe,IAAIF,OAAOD,IAAX,EAAxB;;AAEA;AACA,QAAI,OAAOE,GAAP,IAAc,QAAlB,EAA4B;AACxBA,WAAMP,KAAKS,KAAL,CAAWF,GAAX,CAAN;AACH;;AAED;AACA,QAAIG,kBAAkBJ,OAAOK,SAA7B;AACA,QAAIC,uBAAuBF,kBAAkB,CAA7C;;AAEA;AACA,QAAIH,IAAIM,QAAJ,GAAeD,oBAAnB,EAAyC;AACrCL,WAAMD,OAAOQ,QAAP,CAAgBP,GAAhB,CAAN;AACH;;AAED;AACAA,QAAIQ,KAAJ;;AAEA;AACA,QAAIC,OAAO,KAAKC,KAAL,GAAaV,IAAIW,KAAJ,EAAxB;AACA,QAAIC,OAAO,KAAKC,KAAL,GAAab,IAAIW,KAAJ,EAAxB;;AAEA;AACA,QAAIG,YAAYL,KAAKM,KAArB;AACA,QAAIC,YAAYJ,KAAKG,KAArB;;AAEA;AACA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAId,eAApB,EAAqCc,GAArC,EAA0C;AACtCH,eAAUG,CAAV,KAAgB,UAAhB;AACAD,eAAUC,CAAV,KAAgB,UAAhB;AACH;AACDR,SAAKH,QAAL,GAAgBM,KAAKN,QAAL,GAAgBD,oBAAhC;;AAEA;AACA,SAAKa,KAAL;AACH,IAjDgC;;AAmDjC;;;;;;;AAOAA,UAAO,iBAAY;AACf;AACA,QAAInB,SAAS,KAAKE,OAAlB;;AAEA;AACAF,WAAOmB,KAAP;AACAnB,WAAOoB,MAAP,CAAc,KAAKN,KAAnB;AACH,IAjEgC;;AAmEjC;;;;;;;;;;;;AAYAM,WAAQ,gBAAUC,aAAV,EAAyB;AAC7B,SAAKnB,OAAL,CAAakB,MAAb,CAAoBC,aAApB;;AAEA;AACA,WAAO,IAAP;AACH,IApFgC;;AAsFjC;;;;;;;;;;;;;;AAcAb,aAAU,kBAAUa,aAAV,EAAyB;AAC/B;AACA,QAAIrB,SAAS,KAAKE,OAAlB;;AAEA;AACA,QAAIoB,YAAYtB,OAAOQ,QAAP,CAAgBa,aAAhB,CAAhB;AACArB,WAAOmB,KAAP;AACA,QAAII,OAAOvB,OAAOQ,QAAP,CAAgB,KAAKG,KAAL,CAAWC,KAAX,GAAmBY,MAAnB,CAA0BF,SAA1B,CAAhB,CAAX;;AAEA,WAAOC,IAAP;AACH;AA9GgC,GAAZ,CAAzB;AAgHH,EA5HA,GAAD;AA+HA,CA9IC,CAAD","file":"hmac.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\crypto-js","sourcesContent":[";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));"]}