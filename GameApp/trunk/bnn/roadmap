### base

一. 完善BnnComponent基类,提供基础的网络,动画,节点回收池等通用接口.

二. 强化model概念,针对网络返回的数据进行包装已提供语义明确的接口.

三. 通用模块抽象
      1. 个人,庄家,下注区域A,B,C都包含通用的牌操作相关逻辑,抽象成统一基类,避免重复代码.
      2. prefab 动态加载的进一步封装,目前在使用的时候以回调方式使用,代码过于丑陋.
      3. 筹码使用池化进一步封装.
      4. --

四. 目录结构整理, 目前简单粗暴按照MVC方式区分,实际也没有Service和数据层,
    实际客户端开发中在UI上会进行更多级别的划分, 所以修改成按模块进行划分, 同时将复杂的UI会进一步划分成更多子组件形式
      1. 下注区域,底部个人下注信息模块划分成子组件形式,目前和整个下注区域交织在一起,变量多了后在多个状态切换的时候整个代码看起来很杂乱
      2. --


### advance 
这里是一些后期可以考虑去做的高级功能

一. DI 即使是个最简陋的DI 都会让代码更清晰, 目前不知道TS上实现DI的难度,但随着项目变的复杂,可以考虑实现.

二. MVP 抽象UI逻辑,后期如果UI改动频繁,可以考虑引入MVP模式减少UI上改动引起的代码整体变动.

三. Event 全局事件通知机制,过多使用全局事件会让逻辑变的复杂,但有时候通知事件会让代码实现上变简单,
    目前cocos的事件是基于node或者一个node层级来设计的,但需要一个更通用的实现.

四. 一些更复杂UI的进一步封装
    1. ScrollView 支持 infinite scroll, 无限滚动的实现主要难点在于计算可见区域以及不可见区,然后将不可见元素回收,
      并提供给可见元素并刷新数据
    2. --
